/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0)
            return NULL;
        if(lists.size()==1)
            return lists[0];
        
        priority_queue<pair<int,ListNode*>> pq;
        ListNode* head=NULL;
        ListNode* k=NULL;
        int n=lists.size();
        
        for(int i=0;i<n;i++)
        {
            while(lists[i]!=NULL)
            {
                pq.push({-lists[i]->val,lists[i]});
                lists[i]= lists[i]->next;
                
            }
        }
        
         if(pq.empty()) return NULL;
        
        head=pq.top().second;
        k=pq.top().second;
        pq.pop();
        
        
        
        while(!pq.empty())
        {
            k->next=pq.top().second;
            k=pq.top().second;
            pq.pop();
            
            
        }
     
        k->next=NULL;
        
            
        if(head==NULL) return NULL;
        else
            return head;
        

        
    }
};
