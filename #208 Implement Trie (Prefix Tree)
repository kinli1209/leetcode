class Trie {
public:
    
    unordered_map<string,string> mp;
    
    
    Trie() {
        
    }
    
    void insert(string word) {
        
        mp[word]=word;
        
    }
    
    bool search(string word) {
        if(mp.find(word)!=mp.end())
            return true;
        else
            return false;
        
    }
    
    bool startsWith(string prefix) {
        
        int n=prefix.size();
        for(auto & it: mp)
        {
            
            if(it.first.substr(0,n)==prefix)
                return true;
            
        }
            
        return false;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
