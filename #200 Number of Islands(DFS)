class Solution {
public:
    
    vector<vector<int>> visited; 
        
    int numIslands(vector<vector<char>>& grid) {
        int ans=0;
        
        int m=grid.size();
        int n=grid[0].size();
        visited.resize(m,vector<int>(n,0));
        for(int i=0;i<m;i++)
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]=='1')
                 ans++;   
                DFS(grid,visited,i,j);
                
            }
        
        return ans;
    }
    
    bool DFS( vector<vector<char>>& grid ,vector<vector<int>>& visited ,int i ,int j )
    {
        
        if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || visited[i][j]==1 || grid[i][j]=='0' )
            return 0;

        visited[i][j]==1;
        grid[i][j]='0';
        
        DFS(grid,visited,i-1,j);
        DFS(grid,visited,i+1,j);
        DFS(grid,visited,i,j-1);
        DFS(grid,visited,i,j+1);
        
        return 1;
    }
};
