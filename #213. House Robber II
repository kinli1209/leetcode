class Solution {
public:
    int rob(vector<int>& nums) {
        
        //House[0]-House[n-2] or House[1]-House[n-1]
        int ans=0;
        int n=nums.size();
        vector<int> dp(n+1,0);
        vector<int> dp2(n+1,0);
        int pick=0;
        int pick2=0;
        int nonpick=0;
        int nonpick2=0;
        if(n==1)
            return nums[0];
        if(n==2)
            return max(nums[0],nums[1]);
        if(n==3) 
            return max({nums[2],nums[1],nums[0]});
        
      
        dp[0]=0;
        dp[1]=nums[0];
        dp2[0]=0;
        //dp2[1]=nums[1];
        
        
        for(int i=1;i<n-1;i++)
        {  
            pick=nums[i];// n-2
            //pick=nums[i+1];
            dp[i+1]=max(dp[i],dp[i-1]+pick);
            
        }
        
         for(int i=1;i<n;i++)//n-1
        {
             
            pick2=nums[i];
        
            dp2[i+1]=max(dp2[i],dp2[i-1]+pick2);
    
        }
        
             
        
        return max(dp[n-1],dp2[n]); 
    }
};
